// <auto-generated />
#pragma warning disable CS0105
using BanGround.Database.RawModels;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System;

namespace BanGround.Database.Models.Tables
{
   public sealed partial class RankItemTable : TableBase<RankItem>, ITableUniqueValidate
   {
        public Func<RankItem, int> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<RankItem, int> primaryIndexSelector;

        readonly RankItem[] secondaryIndex0;
        readonly Func<RankItem, int> secondaryIndex0Selector;
        readonly RankItem[] secondaryIndex1;
        readonly Func<RankItem, (int ChartId, Difficulty difficulty)> secondaryIndex1Selector;
        readonly RankItem[] secondaryIndex2;
        readonly Func<RankItem, int> secondaryIndex2Selector;
        readonly RankItem[] secondaryIndex3;
        readonly Func<RankItem, string> secondaryIndex3Selector;

        public RankItemTable(RankItem[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.Id;
            this.secondaryIndex0Selector = x => x.ChartId;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            this.secondaryIndex1Selector = x => (x.ChartId, x.difficulty);
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.Collections.Generic.Comparer<(int ChartId, Difficulty difficulty)>.Default);
            this.secondaryIndex2Selector = x => x.MusicId;
            this.secondaryIndex2 = CloneAndSortBy(this.secondaryIndex2Selector, System.Collections.Generic.Comparer<int>.Default);
            this.secondaryIndex3Selector = x => x.ChartHash;
            this.secondaryIndex3 = CloneAndSortBy(this.secondaryIndex3Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<RankItem> SortByChartId => new RangeView<RankItem>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);
        public RangeView<RankItem> SortByChartIdAnddifficulty => new RangeView<RankItem>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);
        public RangeView<RankItem> SortByMusicId => new RangeView<RankItem>(secondaryIndex2, 0, secondaryIndex2.Length - 1, true);
        public RangeView<RankItem> SortByChartHash => new RangeView<RankItem>(secondaryIndex3, 0, secondaryIndex3.Length - 1, true);

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public RankItem FindById(int key)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].Id;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { return data[mid]; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            return ThrowKeyNotFound(key);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool TryFindById(int key, out RankItem result)
        {
            var lo = 0;
            var hi = data.Length - 1;
            while (lo <= hi)
            {
                var mid = (int)(((uint)hi + (uint)lo) >> 1);
                var selected = data[mid].Id;
                var found = (selected < key) ? -1 : (selected > key) ? 1 : 0;
                if (found == 0) { result = data[mid]; return true; }
                if (found < 0) { lo = mid + 1; }
                else { hi = mid - 1; }
            }
            result = default;
            return false;
        }

        public RankItem FindClosestById(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<RankItem> FindRangeById(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<RankItem> FindByChartId(int key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key);
        }

        public RangeView<RankItem> FindClosestByChartId(int key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<RankItem> FindRangeByChartId(int min, int max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<RankItem> FindByChartIdAnddifficulty((int ChartId, Difficulty difficulty) key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<(int ChartId, Difficulty difficulty)>.Default, key);
        }

        public RangeView<RankItem> FindClosestByChartIdAnddifficulty((int ChartId, Difficulty difficulty) key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<(int ChartId, Difficulty difficulty)>.Default, key, selectLower);
        }

        public RangeView<RankItem> FindRangeByChartIdAnddifficulty((int ChartId, Difficulty difficulty) min, (int ChartId, Difficulty difficulty) max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.Collections.Generic.Comparer<(int ChartId, Difficulty difficulty)>.Default, min, max, ascendant);
        }

        public RangeView<RankItem> FindByMusicId(int key)
        {
            return FindManyCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<int>.Default, key);
        }

        public RangeView<RankItem> FindClosestByMusicId(int key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<RankItem> FindRangeByMusicId(int min, int max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex2, secondaryIndex2Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<RankItem> FindByChartHash(string key)
        {
            return FindManyCore(secondaryIndex3, secondaryIndex3Selector, System.StringComparer.Ordinal, key);
        }

        public RangeView<RankItem> FindClosestByChartHash(string key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex3, secondaryIndex3Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<RankItem> FindRangeByChartHash(string min, string max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex3, secondaryIndex3Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
            ValidateUniqueCore(data, primaryIndexSelector, "Id", resultSet);       
        }

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(RankItem), typeof(RankItemTable), "Rank",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("Id")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("ChartId")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("difficulty")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("MusicId")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("Acc")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("Rank")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("ChartHash")),
                    new MasterMemory.Meta.MetaProperty(typeof(RankItem).GetProperty("ReplayFile")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RankItem).GetProperty("Id"),
                    }, true, true, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RankItem).GetProperty("ChartId"),
                    }, false, false, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RankItem).GetProperty("ChartId"),
                        typeof(RankItem).GetProperty("difficulty"),
                    }, false, false, System.Collections.Generic.Comparer<(int ChartId, Difficulty difficulty)>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RankItem).GetProperty("MusicId"),
                    }, false, false, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(RankItem).GetProperty("ChartHash"),
                    }, false, false, System.StringComparer.Ordinal),
                });
        }

    }
}