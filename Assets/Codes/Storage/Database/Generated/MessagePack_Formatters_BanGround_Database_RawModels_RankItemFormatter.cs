// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.BanGround.Database.RawModels
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class RankItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BanGround.Database.RawModels.RankItem>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ChartId
        private static global::System.ReadOnlySpan<byte> GetSpan_ChartId() => new byte[1 + 7] { 167, 67, 104, 97, 114, 116, 73, 100 };
        // difficulty
        private static global::System.ReadOnlySpan<byte> GetSpan_difficulty() => new byte[1 + 10] { 170, 100, 105, 102, 102, 105, 99, 117, 108, 116, 121 };
        // MusicId
        private static global::System.ReadOnlySpan<byte> GetSpan_MusicId() => new byte[1 + 7] { 167, 77, 117, 115, 105, 99, 73, 100 };
        // Acc
        private static global::System.ReadOnlySpan<byte> GetSpan_Acc() => new byte[1 + 3] { 163, 65, 99, 99 };
        // Rank
        private static global::System.ReadOnlySpan<byte> GetSpan_Rank() => new byte[1 + 4] { 164, 82, 97, 110, 107 };
        // ChartHash
        private static global::System.ReadOnlySpan<byte> GetSpan_ChartHash() => new byte[1 + 9] { 169, 67, 104, 97, 114, 116, 72, 97, 115, 104 };
        // ReplayFile
        private static global::System.ReadOnlySpan<byte> GetSpan_ReplayFile() => new byte[1 + 10] { 170, 82, 101, 112, 108, 97, 121, 70, 105, 108, 101 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BanGround.Database.RawModels.RankItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(8);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_ChartId());
            writer.Write(value.ChartId);
            writer.WriteRaw(GetSpan_difficulty());
            formatterResolver.GetFormatterWithVerify<Difficulty>().Serialize(ref writer, value.difficulty, options);
            writer.WriteRaw(GetSpan_MusicId());
            writer.Write(value.MusicId);
            writer.WriteRaw(GetSpan_Acc());
            writer.Write(value.Acc);
            writer.WriteRaw(GetSpan_Rank());
            formatterResolver.GetFormatterWithVerify<Ranks>().Serialize(ref writer, value.Rank, options);
            writer.WriteRaw(GetSpan_ChartHash());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChartHash, options);
            writer.WriteRaw(GetSpan_ReplayFile());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ReplayFile, options);
        }

        public global::BanGround.Database.RawModels.RankItem Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __ChartId__ = default(int);
            var __difficulty__ = default(Difficulty);
            var __MusicId__ = default(int);
            var __Acc__ = default(float);
            var __Rank__ = default(Ranks);
            var __ChartHash__ = default(string);
            var __ReplayFile__ = default(string);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28228262155085891UL:
                                __ChartId__ = reader.ReadInt32();
                                continue;
                            case 28228188990829901UL:
                                __MusicId__ = reader.ReadInt32();
                                continue;
                        }
                    case 10:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 7815262032712067428UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 31092UL) { goto FAIL; }

                                __difficulty__ = formatterResolver.GetFormatterWithVerify<Difficulty>().Deserialize(ref reader, options);
                                continue;

                            case 7585884081690273106UL:
                                if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25964UL) { goto FAIL; }

                                __ReplayFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                                continue;

                        }
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6513473UL) { goto FAIL; }

                        __Acc__ = reader.ReadSingle();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1802395986UL) { goto FAIL; }

                        __Rank__ = formatterResolver.GetFormatterWithVerify<Ranks>().Deserialize(ref reader, options);
                        continue;
                    case 9:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ChartHash().Slice(1))) { goto FAIL; }

                        __ChartHash__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::BanGround.Database.RawModels.RankItem()
            {
                Id = __Id__,
                ChartId = __ChartId__,
                difficulty = __difficulty__,
                MusicId = __MusicId__,
                Acc = __Acc__,
                Rank = __Rank__,
                ChartHash = __ChartHash__,
                ReplayFile = __ReplayFile__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}
