// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.BanGround.Database.Models
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class ChartSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BanGround.Database.Models.ChartSet>
    {
        // Sid
        private static global::System.ReadOnlySpan<byte> GetSpan_Sid() => new byte[1 + 3] { 163, 83, 105, 100 };
        // Mid
        private static global::System.ReadOnlySpan<byte> GetSpan_Mid() => new byte[1 + 3] { 163, 77, 105, 100 };
        // Difficulties
        private static global::System.ReadOnlySpan<byte> GetSpan_Difficulties() => new byte[1 + 12] { 172, 68, 105, 102, 102, 105, 99, 117, 108, 116, 105, 101, 115 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BanGround.Database.Models.ChartSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(3);
            writer.WriteRaw(GetSpan_Sid());
            writer.Write(value.Sid);
            writer.WriteRaw(GetSpan_Mid());
            writer.Write(value.Mid);
            writer.WriteRaw(GetSpan_Difficulties());
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Difficulties, options);
        }

        public global::BanGround.Database.Models.ChartSet Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Sid__ = default(int);
            var __Mid__ = default(int);
            var __Difficulties__ = default(int[]);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 3:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 6580563UL:
                                __Sid__ = reader.ReadInt32();
                                continue;
                            case 6580557UL:
                                __Mid__ = reader.ReadInt32();
                                continue;
                        }
                    case 12:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_Difficulties().Slice(1))) { goto FAIL; }

                        __Difficulties__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::BanGround.Database.Models.ChartSet()
            {
                Sid = __Sid__,
                Mid = __Mid__,
                Difficulties = __Difficulties__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}
