// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.BanGround.Database.Models
{
    using System;
    using System.Buffers;
    using System.Runtime.InteropServices;
    using MessagePack;

    public sealed class RankItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::BanGround.Database.Models.RankItem>
    {
        // Id
        private static global::System.ReadOnlySpan<byte> GetSpan_Id() => new byte[1 + 2] { 162, 73, 100 };
        // ChartId
        private static global::System.ReadOnlySpan<byte> GetSpan_ChartId() => new byte[1 + 7] { 167, 67, 104, 97, 114, 116, 73, 100 };
        // _Difficulty
        private static global::System.ReadOnlySpan<byte> GetSpan__Difficulty() => new byte[1 + 11] { 171, 95, 68, 105, 102, 102, 105, 99, 117, 108, 116, 121 };
        // MusicId
        private static global::System.ReadOnlySpan<byte> GetSpan_MusicId() => new byte[1 + 7] { 167, 77, 117, 115, 105, 99, 73, 100 };
        // Judge
        private static global::System.ReadOnlySpan<byte> GetSpan_Judge() => new byte[1 + 5] { 165, 74, 117, 100, 103, 101 };
        // Acc
        private static global::System.ReadOnlySpan<byte> GetSpan_Acc() => new byte[1 + 3] { 163, 65, 99, 99 };
        // Combo
        private static global::System.ReadOnlySpan<byte> GetSpan_Combo() => new byte[1 + 5] { 165, 67, 111, 109, 98, 111 };
        // Score
        private static global::System.ReadOnlySpan<byte> GetSpan_Score() => new byte[1 + 5] { 165, 83, 99, 111, 114, 101 };
        // Mods
        private static global::System.ReadOnlySpan<byte> GetSpan_Mods() => new byte[1 + 4] { 164, 77, 111, 100, 115 };
        // ChartHash
        private static global::System.ReadOnlySpan<byte> GetSpan_ChartHash() => new byte[1 + 9] { 169, 67, 104, 97, 114, 116, 72, 97, 115, 104 };
        // ReplayFile
        private static global::System.ReadOnlySpan<byte> GetSpan_ReplayFile() => new byte[1 + 10] { 170, 82, 101, 112, 108, 97, 121, 70, 105, 108, 101 };
        // CreatedAt
        private static global::System.ReadOnlySpan<byte> GetSpan_CreatedAt() => new byte[1 + 9] { 169, 67, 114, 101, 97, 116, 101, 100, 65, 116 };

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::BanGround.Database.Models.RankItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value is null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(12);
            writer.WriteRaw(GetSpan_Id());
            writer.Write(value.Id);
            writer.WriteRaw(GetSpan_ChartId());
            writer.Write(value.ChartId);
            writer.WriteRaw(GetSpan__Difficulty());
            writer.Write(value._Difficulty);
            writer.WriteRaw(GetSpan_MusicId());
            writer.Write(value.MusicId);
            writer.WriteRaw(GetSpan_Judge());
            formatterResolver.GetFormatterWithVerify<int[]>().Serialize(ref writer, value.Judge, options);
            writer.WriteRaw(GetSpan_Acc());
            writer.Write(value.Acc);
            writer.WriteRaw(GetSpan_Combo());
            writer.Write(value.Combo);
            writer.WriteRaw(GetSpan_Score());
            writer.Write(value.Score);
            writer.WriteRaw(GetSpan_Mods());
            writer.Write(value.Mods);
            writer.WriteRaw(GetSpan_ChartHash());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ChartHash, options);
            writer.WriteRaw(GetSpan_ReplayFile());
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.ReplayFile, options);
            writer.WriteRaw(GetSpan_CreatedAt());
            formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Serialize(ref writer, value.CreatedAt, options);
        }

        public global::BanGround.Database.Models.RankItem Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __Id__ = default(int);
            var __ChartId__ = default(int);
            var ___Difficulty__ = default(int);
            var __MusicId__ = default(int);
            var __Judge__ = default(int[]);
            var __Acc__ = default(double);
            var __Combo__ = default(int);
            var __Score__ = default(int);
            var __Mods__ = default(ulong);
            var __ChartHash__ = default(string);
            var __ReplayFile__ = default(string);
            var __CreatedAt__ = default(global::System.DateTime);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                switch (stringKey.Length)
                {
                    default:
                    FAIL:
                      reader.Skip();
                      continue;
                    case 2:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 25673UL) { goto FAIL; }

                        __Id__ = reader.ReadInt32();
                        continue;
                    case 7:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 28228262155085891UL:
                                __ChartId__ = reader.ReadInt32();
                                continue;
                            case 28228188990829901UL:
                                __MusicId__ = reader.ReadInt32();
                                continue;
                        }
                    case 11:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan__Difficulty().Slice(1))) { goto FAIL; }

                        ___Difficulty__ = reader.ReadInt32();
                        continue;
                    case 5:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 435526333770UL:
                                __Judge__ = formatterResolver.GetFormatterWithVerify<int[]>().Deserialize(ref reader, options);
                                continue;
                            case 478392708931UL:
                                __Combo__ = reader.ReadInt32();
                                continue;
                            case 435711599443UL:
                                __Score__ = reader.ReadInt32();
                                continue;
                        }
                    case 3:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 6513473UL) { goto FAIL; }

                        __Acc__ = reader.ReadDouble();
                        continue;
                    case 4:
                        if (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey) != 1935961933UL) { goto FAIL; }

                        __Mods__ = reader.ReadUInt64();
                        continue;
                    case 9:
                        switch (global::MessagePack.Internal.AutomataKeyGen.GetKey(ref stringKey))
                        {
                            default: goto FAIL;
                            case 8314006052075038787UL:
                                if (stringKey[0] != 104) { goto FAIL; }

                                __ChartHash__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                                continue;

                            case 4712002660661031491UL:
                                if (stringKey[0] != 116) { goto FAIL; }

                                __CreatedAt__ = formatterResolver.GetFormatterWithVerify<global::System.DateTime>().Deserialize(ref reader, options);
                                continue;

                        }
                    case 10:
                        if (!global::System.MemoryExtensions.SequenceEqual(stringKey, GetSpan_ReplayFile().Slice(1))) { goto FAIL; }

                        __ReplayFile__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        continue;

                }
            }

            var ____result = new global::BanGround.Database.Models.RankItem()
            {
                Id = __Id__,
                ChartId = __ChartId__,
                _Difficulty = ___Difficulty__,
                MusicId = __MusicId__,
                Judge = __Judge__,
                Acc = __Acc__,
                Combo = __Combo__,
                Score = __Score__,
                Mods = __Mods__,
                ChartHash = __ChartHash__,
                ReplayFile = __ReplayFile__,
                CreatedAt = __CreatedAt__,
            };

            reader.Depth--;
            return ____result;
        }
    }
}
